/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type DateOnly, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
// @ts-ignore
import { type Guid } from 'guid-typescript';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DateOnly}
 */
// @ts-ignore
export function createDateOnlyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDateOnly;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserInfo}
 */
// @ts-ignore
export function createUserInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WeatherForecast}
 */
// @ts-ignore
export function createWeatherForecastFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWeatherForecast;
}
export interface DateOnly extends Parsable {
    /**
     * The day property
     */
    day?: number;
    /**
     * The dayNumber property
     */
    dayNumber?: number;
    /**
     * The dayOfWeek property
     */
    dayOfWeek?: number;
    /**
     * The dayOfYear property
     */
    dayOfYear?: number;
    /**
     * The month property
     */
    month?: number;
    /**
     * The year property
     */
    year?: number;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoDateOnly(dateOnly: Partial<DateOnly> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "day": n => { dateOnly.day = n.getNumberValue(); },
        "dayNumber": n => { dateOnly.dayNumber = n.getNumberValue(); },
        "dayOfWeek": n => { dateOnly.dayOfWeek = n.getNumberValue(); },
        "dayOfYear": n => { dateOnly.dayOfYear = n.getNumberValue(); },
        "month": n => { dateOnly.month = n.getNumberValue(); },
        "year": n => { dateOnly.year = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserInfo(userInfo: Partial<UserInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { userInfo.id = n.getGuidValue(); },
        "username": n => { userInfo.username = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoWeatherForecast(weatherForecast: Partial<WeatherForecast> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "date": n => { weatherForecast.date = n.getDateOnlyValue(); },
        "summary": n => { weatherForecast.summary = n.getStringValue(); },
        "temperatureC": n => { weatherForecast.temperatureC = n.getNumberValue(); },
        "temperatureF": n => { weatherForecast.temperatureF = n.getNumberValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeDateOnly(writer: SerializationWriter, dateOnly: Partial<DateOnly> | undefined = {}) : void {
    writer.writeNumberValue("day", dateOnly.day);
    writer.writeNumberValue("dayOfWeek", dateOnly.dayOfWeek);
    writer.writeNumberValue("month", dateOnly.month);
    writer.writeNumberValue("year", dateOnly.year);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserInfo(writer: SerializationWriter, userInfo: Partial<UserInfo> | undefined = {}) : void {
    writer.writeGuidValue("id", userInfo.id);
    writer.writeStringValue("username", userInfo.username);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeWeatherForecast(writer: SerializationWriter, weatherForecast: Partial<WeatherForecast> | undefined = {}) : void {
    writer.writeDateOnlyValue("date", weatherForecast.date);
    writer.writeStringValue("summary", weatherForecast.summary);
    writer.writeNumberValue("temperatureC", weatherForecast.temperatureC);
}
export interface UserInfo extends Parsable {
    /**
     * The id property
     */
    id?: Guid;
    /**
     * The username property
     */
    username?: string;
}
export interface WeatherForecast extends Parsable {
    /**
     * The date property
     */
    date?: DateOnly;
    /**
     * The summary property
     */
    summary?: string;
    /**
     * The temperatureC property
     */
    temperatureC?: number;
    /**
     * The temperatureF property
     */
    temperatureF?: number;
}
/* tslint:enable */
/* eslint-enable */
